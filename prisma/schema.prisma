// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  username     String?
  Recipe       Recipe[]
  Product      Product[]
  ShoppingList ShoppingList[]
}

enum Unit {
  ml
  l
  g
  kg
  piece
}

model Product {
  id               Int                @id @default(autoincrement())
  ProductsOnRecipe ProductsOnRecipe[]
  unit             Unit
  createdBy        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  name             String
  description      String?
  price            Int                @default(0)

  @@unique([userId, name])
}

model Recipe {
  id               Int                @id @default(autoincrement())
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  description      String?
  name             String
  ProductsOnRecipe ProductsOnRecipe[]

  @@unique([userId, name])
}

model ProductsOnRecipe {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  recipe    Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId  Int
  quantity  Int
}

model ShoppingList {
  id                     Int                      @id @default(autoincrement())
  user                   User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                   String
  createdAt              DateTime                 @default(now())
  userId                 String
  RecipiesOnShoppingList RecipiesOnShoppingList[]
  ProductsOnShoppingList ProductsOnShoppingList[]
}

model RecipiesOnShoppingList {
  id             Int          @id @default(autoincrement())
  shoppingList   ShoppingList @relation(fields: [shoppingListId], references: [id], onDelete: Cascade)
  shoppingListId Int
}

model ProductsOnShoppingList {
  id             Int          @id @default(autoincrement())
  shoppingList   ShoppingList @relation(fields: [shoppingListId], references: [id], onDelete: Cascade)
  shoppingListId Int
}
